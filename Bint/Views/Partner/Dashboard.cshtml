@model PartnerDashboard
@using System.Data
@{
    var bsf = "0";

    Layout = "~/Views/Shared/_PartnerLayout.cshtml";
}
<script src="~/js/widgets_stats.js"></script>
<div class="wrapper">
    <!-- Content Wrapper. Contains page content -->
    <div class="content-wrapper">
        <!-- Content Header (Page header) -->
        <div class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-6">
                        <h1 class="m-0 text-dark">Partner Dashboard</h1>
                    </div><!-- /.col -->
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a href="/partner/dashboard"><i class="fas fa-home mr-2"></i>Home</a></li>
                            <li class="breadcrumb-item active">Partner Dashboard</li>
                        </ol>
                    </div><!-- /.col -->
                </div><!-- /.row -->
            </div><!-- /.container-fluid -->
        </div>
        <!-- /.content-header -->
        <!-- Main content -->
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-9">

                        <div class="row">
                            <div class="col-md-4">

                                <!-- Invitation stats white -->
                                <div class="card text-center">
                                    <div class="card-body">
                                        <h6 class="font-weight-semibold mb-0 mt-1">Usd Request Payback</h6>
                                        <div class="text-muted mb-3"></div>
                                        <div class="svg-center position-relative mb-1" id="progress_percentage_one">
                                        </div>
                                    </div>
                                    <div class="card-body border-top-0 pt-0">
                                        @foreach (DataRow row in Model.Payback.UsdPaybackUser.Rows)
                                        {
                                            ViewData["bsf"] = Convert.ToString(row["percentage"]);
                                            bsf = Convert.ToString(ViewData["bsf"]);

                                            <div class="row">
                                                <div class="col-4">
                                                    <div class="text-uppercase font-size-xs text-muted">Total</div>
                                                    <h5 class="font-weight-semibold line-height-1 mt-1 mb-0">@row["totalamount"]</h5>
                                                </div>
                                                <div class="col-4">
                                                    <div class="text-uppercase font-size-xs text-muted">Paid back</div>
                                                    <h5 class="font-weight-semibold line-height-1 mt-1 mb-0">@row["paid"]</h5>
                                                </div>
                                                <div class="col-4">
                                                    <div class="text-uppercase font-size-xs text-muted">Pending</div>
                                                    <h5 class="font-weight-semibold line-height-1 mt-1 mb-0">@row["pending"]</h5>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <!-- /invitation stats white -->


                            </div>
                        </div>





                    </div>
                    @await Html.PartialAsync("_PartnerProfile")

                </div><!--/. container-fluid -->
            </div>
        </section>
        <!-- /.content -->
    </div>
</div>
<script>

    var StatisticWidgets = function () {


        var _progressPercentage = function (element, radius, border, foregroundColor, end) {
            if (typeof d3 == 'undefined') {
                console.warn('Warning - d3.min.js is not loaded.');
                return;
            }

            // Initialize chart only if element exsists in the DOM
            if (element) {


                // Basic setup
                // ------------------------------

                // Main variables
                var d3Container = d3.select(element),
                    startPercent = 0,
                    fontSize = 22,
                    endPercent = end,
                    twoPi = Math.PI * 2,
                    formatPercent = d3.format('.0%'),
                    boxSize = radius * 2;

                // Values count
                var count = Math.abs((endPercent - startPercent) / 0.01);

                // Values step
                var step = endPercent < startPercent ? -0.01 : 0.01;


                // Create chart
                // ------------------------------

                // Add SVG element
                var container = d3Container.append('svg');

                // Add SVG group
                var svg = container
                    .attr('width', boxSize)
                    .attr('height', boxSize)
                    .append('g')
                    .attr('transform', 'translate(' + radius + ',' + radius + ')');


                // Construct chart layout
                // ------------------------------

                // Arc
                var arc = d3.svg.arc()
                    .startAngle(0)
                    .innerRadius(radius)
                    .outerRadius(radius - border)
                    .cornerRadius(20);


                //
                // Append chart elements
                //

                // Paths
                // ------------------------------

                // Background path
                svg.append('path')
                    .attr('class', 'd3-progress-background')
                    .attr('d', arc.endAngle(twoPi))
                    .style('fill', foregroundColor)
                    .style('opacity', 0.1);

                // Foreground path
                var foreground = svg.append('path')
                    .attr('class', 'd3-progress-foreground')
                    .attr('filter', 'url(#blur)')
                    .style({
                        'fill': foregroundColor,
                        'stroke': foregroundColor
                    });

                // Front path
                var front = svg.append('path')
                    .attr('class', 'd3-progress-front')
                    .style({
                        'fill': foregroundColor,
                        'fill-opacity': 1
                    });


                // Text
                // ------------------------------

                // Percentage text value
                var numberText = svg
                    .append('text')
                    .attr('dx', 0)
                    .attr('dy', (fontSize / 2) - border)
                    .style({
                        'font-size': fontSize + 'px',
                        'line-height': 1,
                        'fill': foregroundColor,
                        'text-anchor': 'middle'
                    });


                // Animation
                // ------------------------------

                // Animate path
                function updateProgress(progress) {
                    foreground.attr('d', arc.endAngle(twoPi * progress));
                    front.attr('d', arc.endAngle(twoPi * progress));
                    numberText.text(formatPercent(progress));
                }

                // Animate text
                var progress = startPercent;
                (function loops() {
                    updateProgress(progress);
                    if (count > 0) {
                        count--;
                        progress += step;
                        setTimeout(loops, 10);
                    }
                })();
            }
        };


        //
        // Return objects assigned to module
        //

        return {
            init: function () {

                _progressPercentage('#progress_percentage_one', 46, 3, "#ec3f7a", @bsf);


            }
        }
    }();


    // Initialize module
    // ------------------------------

    // When content loaded
    document.addEventListener('DOMContentLoaded', function () {
        StatisticWidgets.init();
    });

</script>